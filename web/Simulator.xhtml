<?xml version='1.0' encoding='UTF-8' ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:h="http://xmlns.jcp.org/jsf/html"
      xmlns:ui="http://xmlns.jcp.org/jsf/facelets"
      xmlns:p="http://primefaces.org/ui"
      xmlns:a="http://xmlns.jcp.org/jsf/passthrough">

    <ui:composition template="/templates/siteTemplate.xhtml">

        <ui:define name="editableContent">

            <!--HTML canvas element styling-->
            <style> 
                canvas {
                    position: absolute;
                    left: 300px;
                    width: calc(100% - 300px) !important;
                }
            </style>

            <div id="controlPanel">
                <!--Model Composer Components-->
                <h:outputText value="#{projectManager.selectedProjectName}" style="color: blue; font-size: 20pt; font-weight: bold;"/>
                <label class="controlLabel">Model Composer</label>
                <button id="enterPointButton" class="btn panelButton" onClick="buttonClicked(this.id);"> Enter Point</button>
                <button id="exitPointButton" class="btn panelButton" onClick="buttonClicked(this.id);"> Exit Point</button>
                <button id="moveSpotButton" class="btn panelButton" onClick="buttonClicked(this.id);"> Move Spot</button>
                <button id="trafficLightButton" class="btn panelButton" onClick="buttonClicked(this.id);"> Traffic Light</button>
                <button id="forkButton" class="btn panelButton" onClick="buttonClicked(this.id);"> Convert to Fork</button>
                <button id="mergeButton" class="btn panelButton" onClick="buttonClicked(this.id);"> Convert to Merge</button>
                <button id="removeButton" class="btn panelButton" onClick="removeMoveSpot();"> Remove Last</button>
                <button id="hideButton" class="btn panelButton" onClick="hideShowModelDetails(this);"> Hide Spots</button>

                <!--Traffic Light Form. It is not displayed initially-->
                <h:form id="trafficLightForm" style="display: none;">
                    <label class="controlLabel">Set Traffic Light</label>
                    <h:panelGrid columns="2" cellpadding="5" columnClasses="trafficLight-label, trafficLight-input">
                        <h:outputLabel for="greenStartTime" value="Green Start Time: " />
                        <h:inputText a:placeholder="0 seconds" id="greenStartTime" class="form-control"/>
                        <p:outputLabel for="greenDuration" value="Green Duration: " />
                        <h:inputText a:placeholder="15 seconds" id="greenDuration" class="form-control" />
                        <p:outputLabel for="redDuration" value="Red Duration: " />
                        <h:inputText a:placeholder="45 seconds" id="redDuration" class="form-control"  />
                    </h:panelGrid>                    
                </h:form>
                <button id="trafficLightChangeButton" class="btn panelButton" onClick="saveTrafficLightChanges();" style="display: none;"> Save Changes </button>

                <!--Enter Point Form. It is not displayed initially-->
                <h:form id="enterPointForm" style="display: none;">
                    <label class="controlLabel">Vehicle Generation Timing</label>
                    <h:panelGrid columns="2" cellpadding="5" columnClasses=", enterPoint-input">
                        <p:outputLabel for="minVehicleGenerationTime" value="Random Time Minimum:" />
                        <h:inputText a:placeholder="2 seconds" id="minVehicleGenerationTime" class="form-control" />
                        <p:outputLabel for="maxVehicleGenerationTime" value="Random Time Maximum:" />
                        <h:inputText a:placeholder="5 seconds" id="maxVehicleGenerationTime" class="form-control" />
                    </h:panelGrid>                    
                </h:form>
                <button id="enterPointChangeButton" class="btn panelButton" onClick="saveEnterPointChanges();" style="display: none;"> Save Changes </button>

                <!--Fork Form. It is not displayed initially-->
                <h:form id="convertToForkForm" style="display: none;">
                    <label class="controlLabel">Fork Settings</label>
                    <h:panelGrid columns="2" cellpadding="5" columnClasses="fork-label, fork-input">
                        <p:outputLabel for="forkNewPathProbability" value="New Path Probability:" />
                        <h:inputText a:placeholder="80 percent" id="forkNewPathProbability" class="form-control" />
                    </h:panelGrid> 
                </h:form>
                <button id="convertForkChangeButton" class="btn panelButton" onClick="saveConvertForkChanges();" style="display: none;"> Save Changes </button>

                <br/>

                <!--Vehicle Size Adjustment buttons-->
                <div id="vehicleSizeDiv">                   
                    <label class="controlLabel">Vehicle Size</label>                        
                    <button class="btn panelButton" onClick="createExampleVehicle('+');"> + </button>
                    <button class="btn panelButton" onClick="createExampleVehicle('-');"> - </button>
                </div>

                <!--Zoom in/Zoom out buttons-->
                <div id="zoomDiv">                   
                    <label class="controlLabel">Zoom In / Zoom Out</label>                        
                    <button class="btn panelButton" onClick="zoomIn();"> + </button>
                    <button class="btn panelButton" onClick="zoomOut();"> - </button>
                </div>

                <br/>

                <!--Simulation Control buttons-->
                <div id="startSimDiv">
                    <label class="controlLabel">Simulator Commands</label>
                    <h:panelGrid columns="2" cellpadding="5" columnClasses="simulationCommandsColumn1, simulationCommandsColumn1">
                        <h:outputLabel for="simulationDuration" value="Simulation Duration: " />
                        <h:inputText a:placeholder="10 minutes" id="simulationDuration" class="form-control" style="width: 120px;"/>
                    </h:panelGrid>
                    <button id="startStopButton" class="btn panelButton" onClick="startSimulation();"> Start Simulation</button>
                    <button id="pauseButton" class="btn panelButton" onClick="pauseSimulation(this);"> Pause Simulation</button>
                    <h:form id="simModelForm">
                        <h:commandButton id="saveButton" class="btn panelButton" onclick="saveModel();"
                                         action="#{projectManager.saveProjectModel}" value="Save Model"/>      
                        <h:inputHidden id="hiddenSimulationModel" value="#{projectManager.simulationModelData}"/>                      
                    </h:form>
                </div>


                <!--Simulation results form. It is not displayed initially-->
                <h:form id="simResultForm" style="display: none;">
                    <label class="controlLabel">Simulation Results</label>
                    <h:panelGrid columns="2" cellpadding="5" columnClasses="simulationCommandsColumn1, simulationCommandsColumn1">
                        <h:outputLabel for="vehicleCount" value="Total Number Of Vehicles: " />
                        <h:inputText  id="vehicleCount" class="form-control" style="width: 120px;" readonly="true"/>
                        <h:outputLabel for="averageTime" value="Average Time Spent In the Traffic Network: " />
                        <h:inputText  id="averageTime" class="form-control" style="width: 120px;" readonly="true"/>
                    </h:panelGrid>
                </h:form>

            </div>
            <div>
                <h:inputHidden id="hiddenMapInput" value="#{projectManager.selectedProjectMap}"/>                               
            </div>
            
            <!--JS classes are only used in Simulator.xhtml page-->
            <script src="resources/js/websocket.js"></script>
            <script src="resources/js/three.js"></script>
            <script src="resources/js/threeScene.js"></script>
            <script src="resources/js/moveSpot.js"></script>
            <script src="resources/js/eventProcessor.js"></script>
            <script src="resources/js/vehicle.js"></script>
            <script src="resources/js/simulationVisualizer.js"></script>
            <!--Set HTML canvas element scene-->
            <script>
                        setScene();
            </script>

        </ui:define>
    </ui:composition>

</html>